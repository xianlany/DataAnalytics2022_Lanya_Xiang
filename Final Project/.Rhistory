hunger <- read.csv("hunger.csv", header = TRUE)
corg <- na.omit(corg)
corg %>% drop_na(corg$Area.Harvested)
beans <- corg %>% filter(grepl('Beans, green', Item))
maize <- corg %>% filter(grepl('Maize', Item))
cassava <- corg %>% filter(grepl('Cassava', Item))
yam <- corg %>% filter(grepl('Yams', Item))
sweetpotato <- corg %>% filter(grepl('Sweet potatoes', Item))
rice <- corg %>% filter(grepl('Rice, paddy', Item))
setwd("~/GitHub/DataAnalytics2022_Lanya_Xiang/Final Project")
library(randomForest)
library(dplyr)
library(ggplot2)
library(tidyr)
library(rpart)
library(rpart.plot)
library(class)
crops <- read.csv("crops.csv", header = TRUE)
corg <- read.csv("cropsorganized.csv", header= TRUE)
droughts <- read.csv("droughts.csv", header = TRUE) #include in multivariate regression
hunger <- read.csv("hunger.csv", header = TRUE)
#get precipitation data
corg <- na.omit(corg)
corg %>% drop_na(corg$Area.Harvested)
beans <- corg %>% filter(grepl('Beans, green', Item))
maize <- corg %>% filter(grepl('Maize', Item))
cassava <- corg %>% filter(grepl('Cassava', Item))
yam <- corg %>% filter(grepl('Yams', Item))
sweetpotato <- corg %>% filter(grepl('Sweet potatoes', Item))
rice <- corg %>% filter(grepl('Rice, paddy', Item))
undernourishment <- hunger
undernourishment <- undernourishment[c(3, 4, 9, 12)]
undernourishment$Year <- as.integer(substr(undernourishment$Year.Code, 5, nchar(undernourishment$Year.Code)))
head(undernourishment)
str(undernourishment)
beans_model <- left_join(beans, undernourishment,  by = c("Area", "Year"))
beans_model <- beans_model[c(1, 5, 6, 10)]
beans_model <- na.omit(beans_model)
head(beans_model)
sample_beans <- sample(1:nrow(beans_model),0.7 * nrow(beans_model))
beanstrain = beans_model[sample_beans,]
beanstest = beans_model[-sample_beans,]
#create classification tree
beans_rf <- randomForest(Value ~ Area.Harvested + ï..Area.Code..FAO. + Year, data = beanstrain, type = "class")
beans_rf
pred_beansrf <-predict(beans_rf, beanstest, type = 'class')
table(beanstest$Value, pred_beansrf)
beans_dt <- rpart(Value ~ Area.Harvested + ï..Area.Code..FAO. + Year, data = beanstrain)
rpart.plot(beans_dt)
pred_beansdt <- predict(beans_dt, beanstest, type = 'regression')
pred_beansdt <- predict(beans_dt, beanstest)
table(beanstest$Value, pred_beansdt)
View(undernourishment)
hunger <- na.omit(hunger)
undernourishment <- hunger
undernourishment <- undernourishment[c(3, 4, 9, 12)]
undernourishment$Year <- as.integer(substr(undernourishment$Year.Code, 5, nchar(undernourishment$Year.Code)))
head(undernourishment)
hunger <- read.csv("hunger.csv", header = TRUE)
hunger <- na.omit(hunger)
undernourishment <- hunger
View(undernourishment)
hunger <- read.csv("hunger.csv", header = TRUE)
View(hunger)
undernourishment <- hunger
undernourishment <- undernourishment[c(3, 4, 9, 12)]
undernourishment <- na.omit(undernourishment)
undernourishment$Year <- as.integer(substr(undernourishment$Year.Code, 5, nchar(undernourishment$Year.Code)))
head(undernourishment)
setwd("~/GitHub/DataAnalytics2022_Lanya_Xiang/Final Project")
library(randomForest)
library(dplyr)
library(ggplot2)
library(tidyr)
library(rpart)
library(rpart.plot)
library(class)
crops <- read.csv("crops.csv", header = TRUE)
corg <- read.csv("cropsorganized.csv", header= TRUE)
droughts <- read.csv("droughts.csv", header = TRUE) #include in multivariate regression
hunger <- read.csv("hunger.csv", header = TRUE)
#get precipitation data
corg <- na.omit(corg)
corg %>% drop_na(corg$Area.Harvested)
beans <- corg %>% filter(grepl('Beans, green', Item))
maize <- corg %>% filter(grepl('Maize', Item))
cassava <- corg %>% filter(grepl('Cassava', Item))
yam <- corg %>% filter(grepl('Yams', Item))
sweetpotato <- corg %>% filter(grepl('Sweet potatoes', Item))
rice <- corg %>% filter(grepl('Rice, paddy', Item))
undernourishment <- hunger
undernourishment <- undernourishment[c(3, 4, 9, 12)]
undernourishment <- na.omit(undernourishment)
undernourishment$Year <- as.integer(substr(undernourishment$Year.Code, 5, nchar(undernourishment$Year.Code)))
head(undernourishment)
str(undernourishment)
maize_model <- left_join(maize, undernourishment,  by = c("Area", "Year"))
maize_model <- maize_model[c(1, 5, 6, 10)]
maize_model <- na.omit(maize_model)
head(maize_model)
sample_maize <- sample(1:nrow(maize_model),0.7 * nrow(maize_model))
maizetrain = maize_model[sample_maize,]
maizetest = maize_model[-sample_maize,]
#create tree
maize_rf <- randomForest(Value ~ Area.Harvested + ï..Area.Code..FAO. + Year, data = maizetrain, type = "regression")
maize_rf
rf_pred <- predict(maize_rf, maizetrain, type = "regression")
table(rf_pred, maizetrain$Value)
rf_pred <- predict(maize_rf, maizetrain)
table(rf_pred, maizetrain$Value)
undernourishment$Type <- cut(undernourishment$Value, br = c(0, 10, 30, 50, 100), labels = c("Extremely Low", "Low", "Medium", "High"))
head(undernourishment)
maize_model <- left_join(maize, undernourishment,  by = c("Area", "Year"))
maize_model <- maize_model[c(1, 5, 6, 10)]
maize_model <- na.omit(maize_model)
head(maize_model)
sample_maize <- sample(1:nrow(maize_model),0.7 * nrow(maize_model))
maizetrain = maize_model[sample_maize,]
maizetest = maize_model[-sample_maize,]
#create tree
maize_rf <- randomForest(Type ~ Area.Harvested + ï..Area.Code..FAO. + Year, data = maizetrain, type = "classification")
maize_rf
rf_pred <- predict(maize_rf, maizetrain, type='classification')
rf_pred <- predict(maize_rf, maizetrain, type='class')
table(rf_pred, maizetrain$Value)
table(rf_pred, maizetrain$Type)
maize_rf2 <- randomForest(Type ~ Area.Harvested + ï..Area.Code..FAO. + Year, data = maizetrain, mtree= 1000, ntry = 3, type = "classification")
maize_rf2
rf_pred2 <- predict(maize_rf2, maizetrain, type='class')
table(rf_pred2, maizetrain$Type)
#decision tree
maize_dt <- rpart(Type ~ Area.Harvested + ï..Area.Code..FAO. + Year, data = maizetrain, type = "classification")
rpart.plot(maize_dt)
pred_maizedt <- predict(maize_dt, maizetest, type = 'class')
#decision tree
maize_dt <- rpart(Type ~ Area.Harvested + ï..Area.Code..FAO. + Year, data = maizetrain, type = "classification")
#decision tree
maize_dt <- rpart(Type ~ Area.Harvested + ï..Area.Code..FAO. + Year, data = maizetrain)
rpart.plot(maize_dt)
pred_maizedt <- predict(maize_dt, maizetest, type = 'class')
table(maizetest$Value, pred_maizedt)
table(maizetest$Type, pred_maizedt)
maize$ï..Area.Code..FAO. <- as.factor(maize$ï..Area.Code..FAO.)
summary(maize$ï..Area.Code..FAO.)
str(maize)
knn_maize_df <- maize[c(1, 5, 6)]
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(836) #=19.77~19
KNNpred <- knn(train = knntrain[1:3], test = knntest[1:3], cl = knntrain$ï..Area.Code..FAO., k = 29)
KNNpred
table(KNNpred)
table(KNNpred,knntest)
knntest
KNNpred
str(maize)
head(maize_model)
summary(maize$ï..Area.Code..FAO.)
maize_model
knn_maize_df <- maize_model
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=28.91 ~ 29
KNNpred <- knn(train = knntrain, test = knntest, cl = knntrain$ï..Area.Code..FAO., k = 23)
knn_maize_df <- na.omit(knn_maize_df)
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=22.6 ~ 23
KNNpred <- knn(train = knntrain, test = knntest, cl = knntrain$ï..Area.Code..FAO., k = 23)
knntrain
knn_maize_df$ï..Area.Code..FAO. <- as.factor(knn_maize_df$ï..Area.Code..FAO.)
summary(knn_maize_df$ï..Area.Code..FAO.)
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=22.6 ~ 23
KNNpred <- knn(train = knntrain, test = knntest, cl = knntrain$ïType, k = 23)
head(knntrain)
head(knntest)
KNNpred <- knn(train = knntrain, test = knntest, cl = knntrain$Type, k = 23)
KNNpred <- knn(train = knntrain, test = knntest, cl = knntrain$ï..Area.Code..FAO., k = 23)
knn_maize_df <- maize_model[-c(4)]
knn_maize_df <- na.omit(knn_maize_df)
knn_maize_df$ï..Area.Code..FAO. <- as.factor(knn_maize_df$ï..Area.Code..FAO.)
summary(knn_maize_df$ï..Area.Code..FAO.)
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=22.6 ~ 23
KNNpred <- knn(train = knntrain, test = knntest, cl = knntrain$ï..Area.Code..FAO., k = 23)
KNNpred
table(KNNpred)
table(KNNpred,knntest)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
maize_model
maize_combined <- left_join(maize, undernourishment,  by = c("Area", "Year"))
maize_model <- maize_combined[c(1, 5, 6, 10)]
knn_maize_df <- maize_combined[c(1, 5, 6, 11)]
knn_maize_df <- maize_combined[c(1, 5, 6, 9)]
knn_maize_df <- na.omit(knn_maize_df)
knn_maize_df$ï..Area.Code..FAO. <- as.factor(knn_maize_df$ï..Area.Code..FAO.)
summary(knn_maize_df$ï..Area.Code..FAO.)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
##Run nomalization on first 4 coulumns of dataset because they are the predictors
knn_maize_df <- as.data.frame(lapply(knn_maize_df, nor))
knn_maize_df
str(knn_maize_df)
knn_maize_df <- maize_combined[c(1, 5, 6, 9)]
knn_maize_df <- na.omit(knn_maize_df)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
str(knn_maize_df)
str(maize_combined)
##Run nomalization on first 4 columns of dataset because they are the predictors
knn_maize_df <- as.data.frame(lapply(knn_maize_df[c(2,3,4)], nor))
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=22.6 ~ 23
KNNpred <- knn(train = knntrain, test = knntest, cl = knntrain$ï..Area.Code..FAO., k = 23)
KNNpred
knntrain
head(knn_maize_df)
head(maize_combined)
maize_combined <- left_join(maize, undernourishment,  by = c("Area", "Year"))
maize_combined
maize_combined <- na.omit(maize_combined)
maize_combined
#maize
str(maize_model)
str(maize_model)
knn_maize_df <- maize_combined[c(1, 5, 6, 9)]
knn_maize_df <- na.omit(knn_maize_df)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
str(knn_maize_df)
##Run normalization on first 4 columns of dataset because they are the predictors
knn_maize_df <- as.data.frame(lapply(knn_maize_df[c(2,3,4)], nor))
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=22.6 ~ 23
KNNpred <- knn(train = knntrain, test = knntest, cl = knntrain$Value, k = 23)
KNNpred
table(KNNpred)
table(KNNpred,knntest)
table(KNNpred,knntest$Value)
KNNpred <- knn(train = knntrain, test = knntest, cl = knntrain$Type, k = 23)
knn_maize_df
head(maize_combined)
knn_maize_df <- maize_combined[c(1, 5, 6, 9, 10)]
knn_maize_df <- na.omit(knn_maize_df)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
str(knn_maize_df)
##Run normalization on first 4 columns of dataset because they are the predictors
knn_maize_df <- lapply(knn_maize_df[c(2,3,4)], nor)
head(knn_maize_df)
knn_maize_df
View(knn_maize_df)
##Run normalization on first 4 columns of dataset because they are the predictors
knn_maize_df <- as.data.frame(lapply(knn_maize_df[c(2,3,4)], nor))
View(knn_maize_df)
knn_maize_df <- maize_combined[c(1, 5, 6, 9, 10)]
knn_maize_df <- na.omit(knn_maize_df)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
str(knn_maize_df)
##Run normalization on first 4 columns of dataset because they are the predictors
knn_maize_df <- as.data.frame(lapply(knn_maize_df[c(2,3,4)], nor))
View(knn_maize_df)
sample_maize_knn$ï..Area.Code..FAO. <- maize_combined[c(1)]
maize_combined[c(1)]
knn_maize_df <- maize_combined[c(1, 5, 6, 9, 10)]
knn_maize_df <- na.omit(knn_maize_df)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
str(knn_maize_df)
##Run normalization on first 4 columns of dataset because they are the predictors
knn_maize_df[2:4] <- as.data.frame(lapply(knn_maize_df[c(2,3,4)], nor))
View(knn_maize_df)
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=22.6 ~ 23
KNNpred <- knn(knntrain, knntest, cl = knntrain$Type, k = 23)
knn_maize_df[1] <- as.int(knn_maize_df[c(1)])
knn_maize_df[1] <- as.number(knn_maize_df[c(1)])
knn_maize_df[1] <- as.numeric(knn_maize_df[c(1)])
knn_maize_df[1] <- as.numeric(knn_maize_df[1])
knn_maize_df[1]
str(knn_maize_df)
knn_maize_df[1] <- as.numeric(as.character(knn_maize_df[1]))
knn_maize_df[1] <- as.character(knn_maize_df[1])
str(knn_maize_df)
knn_maize_df[1] <- as.numeric(knn_maize_df[1])
str(maize)
knn_maize_df <- maize_combined[c(5, 6, 9, 10)]
knn_maize_df <- na.omit(knn_maize_df)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
str(knn_maize_df)
##Run normalization on first 4 columns of dataset because they are the predictors
knn_maize_df[1:3] <- as.data.frame(lapply(knn_maize_df[c(1,2,3)], nor))
View(knn_maize_df)
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=22.6 ~ 23
KNNpred <- knn(knntrain, knntest, cl = knntrain$Type, k = 23)
str(knntrain)
sample_maize_knn <- sample(1:3,0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=22.6 ~ 23
KNNpred <- knn(knntrain, knntest, cl = knntrain$Type, k = 23)
str(knntrain)
sample_maize_knn <- sample(1:3,0.7 * nrow(knn_maize_df))
##Run normalization on first 4 columns of dataset because they are the predictors
knn_maize_df[1:3] <- as.data.frame(lapply(knn_maize_df[c(1,2,3)], nor))
View(knn_maize_df)
sample_maize_knn <- sample(1:3,0.7 * nrow(knn_maize_df))
##Run normalization on first 4 columns of dataset because they are the predictors
knn_maize_df[1:3] <- as.data.frame(lapply(knn_maize_df[c(1,2,3)], nor))
View(knn_maize_df)
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=22.6 ~ 23
KNNpred <- knn(knntrain[1:3], knntest[1:3], cl = knntrain$Type, k = 23)
KNNpred
table(KNNpred)
table(KNNpred,knntest$Type)
#maize
maize_model <- maize_combined[c(1, 5, 6, 10)]
maize_model <- na.omit(maize_model)
head(maize_model)
sample_maize <- sample(1:nrow(maize_model),0.7 * nrow(maize_model))
maizetrain = maize_model[sample_maize,]
maizetest = maize_model[-sample_maize,]
#create tree
maize_rf <- randomForest(Type ~ Area.Harvested + ï..Area.Code..FAO. + Year, data = maizetrain, type = "classification")
maize_rf
maize_rf2 <- randomForest(Type ~ Area.Harvested + ï..Area.Code..FAO. + Year, data = maizetrain, mtree= 1000, ntry = 3, type = "classification")
maize_rf2
rf_pred <- predict(maize_rf, maizetrain, type='class')
table(rf_pred, maizetrain$Type)
rf_pred2 <- predict(maize_rf2, maizetrain, type='class')
table(rf_pred2, maizetrain$Type)
View(maize)
View(maize_combined)
set.seed(300)
k.max <- 12
# tot.withinss = Total within-cluster sum of square
# iter.max = the maximum number of iterations allowed
# nstart = if centers is a number, how many random sets should be chosen.
wss <- sapply(1:k.max,function(k){kmeans(maize_[c(5,6)],k,nstart = 100,iter.max = 20)$tot.withinss})
wss # within sum of squares.
plot(1:k.max,wss, type= "b", xlab = "Number of clusters(k)", ylab = "Within cluster sum of squares") #elbow method
icluster <- kmeans(maize[(c(5,6))],3,nstart = 100)
table(icluster$cluster,maize$ï..Area.Code..FAO.)
#c3 low, c1 medium, c2 high (try to visualize these, ggplot kmeans)
maize$cluster <- as.character(icluster$cluster)
ggplot() +
geom_point(data = maize,
mapping = aes(x = Year,
y = Area.Harvested,
colour = cluster)) +
geom_point(mapping = aes_string(x = icluster$centers[, "Year"],
y = icluster$centers[, "Area.Harvested"]),
color = "lightgray", size = 6) +
geom_text(mapping = aes_string(x = icluster$centers[, "Year"],
y = icluster$centers[, "Area.Harvested"],
label = 1:3),
color = "black", size = 4) +
theme_light()
ggplot(maize, aes(x = Year, y = Area.Harvested, col = cluster)) + geom_point() + stat_ellipse()
# tot.withinss = Total within-cluster sum of square
# iter.max = the maximum number of iterations allowed
# nstart = if centers is a number, how many random sets should be chosen.
wss <- sapply(1:k.max,function(k){kmeans(maize_model[c(5,6)],k,nstart = 100,iter.max = 20)$tot.withinss})
# tot.withinss = Total within-cluster sum of square
# iter.max = the maximum number of iterations allowed
# nstart = if centers is a number, how many random sets should be chosen.
wss <- sapply(1:k.max,function(k){kmeans(maize_combined[c(1,5,6,9)],k,nstart = 100,iter.max = 20)$tot.withinss})
wss # within sum of squares.
plot(1:k.max,wss, type= "b", xlab = "Number of clusters(k)", ylab = "Within cluster sum of squares") #elbow method
icluster <- kmeans(maize[(c(1,5,6,9))],4,nstart = 100)
icluster <- kmeans(maize_combined[(c(1,5,6,9))],4,nstart = 100)
table(icluster$cluster,maize_combined$ï..Area.Code..FAO.)
#c3 low, c1 medium, c2 high (try to visualize these, ggplot kmeans)
maize_combined$cluster <- as.character(icluster$cluster)
ggplot() +
geom_point(data = maize,
mapping = aes(x = Year,
y = Area.Harvested,
colour = cluster)) +
geom_point(mapping = aes_string(x = icluster$centers[, "Year"],
y = icluster$centers[, "Area.Harvested"]),
color = "lightgray", size = 6) +
geom_text(mapping = aes_string(x = icluster$centers[, "Year"],
y = icluster$centers[, "Area.Harvested"],
label = 1:3),
color = "black", size = 4) +
theme_light()
ggplot() +
geom_point(data = maize,
mapping = aes(x = Year,
y = Area.Harvested,
colour = cluster)) +
geom_point(mapping = aes_string(x = icluster$centers[, "Year"],
y = icluster$centers[, "Area.Harvested"]),
color = "lightgray", size = 6) +
geom_text(mapping = aes_string(x = icluster$centers[, "Year"],
y = icluster$centers[, "Area.Harvested"],
label = 1:4),
color = "black", size = 4) +
theme_light()
ggplot() +
geom_point(data = maize_combined,
mapping = aes(x = Year,
y = Area.Harvested,
colour = cluster)) +
geom_point(mapping = aes_string(x = icluster$centers[, "Year"],
y = icluster$centers[, "Area.Harvested"]),
color = "lightgray", size = 6) +
geom_text(mapping = aes_string(x = icluster$centers[, "Year"],
y = icluster$centers[, "Area.Harvested"],
label = 1:4),
color = "black", size = 4) +
theme_light()
ggplot() +
geom_point(data = maize_combined,
mapping = aes(x = Year,
y = Area.Harvested,
colour = cluster)) +
geom_point(mapping = aes_string(x = icluster$centers[, "Value"],
y = icluster$centers[, "Area.Harvested"]),
color = "lightgray", size = 6) +
geom_text(mapping = aes_string(x = icluster$centers[, "Value"],
y = icluster$centers[, "Area.Harvested"],
label = 1:4),
color = "black", size = 4) +
theme_light()
ggplot(maize_combined, aes(x = Value, y = Area.Harvested, col = cluster)) + geom_point() + stat_ellipse()
source("~/GitHub/DataAnalytics2022_Lanya_Xiang/Final Project/finalproject.R")
install.packages("randomForest")
ggplot(maize_combined, aes(x = Value, y = Area, col = cluster)) + geom_point() + stat_ellipse()
ggplot(maize_combined, aes(x = Value, y = Area.Code..FAO., col = cluster)) + geom_point() + stat_ellipse()
str(maize_combined)
ggplot(maize_combined, aes(x = Value, y = Area.Code..FAO., col = cluster)) + geom_point() + stat_ellipse()
ggplot(maize_combined, aes(x = Value, y = Area.Harvested, col = cluster)) + geom_point() + stat_ellipse()
wss # within sum of squares.
wss <- sapply(1:k.max,function(k){kmeans(maize_combined[c(1,5,6,9)],k,nstart = 100,iter.max = 20)$tot.withinss})
wss # within sum of squares.
plot(1:k.max,wss, type= "b", xlab = "Number of clusters(k)", ylab = "Within cluster sum of squares") #elbow method
icluster <- kmeans(maize_combined[(c(1,5,6,9))],4,nstart = 100)
table(icluster$cluster,maize_combined$ï..Area.Code..FAO.)
ggplot() +
geom_point(data = maize_combined,
mapping = aes(x = Year,
y = Area.Harvested,
colour = cluster)) +
geom_point(mapping = aes_string(x = icluster$centers[, "Value"],
y = icluster$centers[, "Area.Harvested"]),
color = "lightgray", size = 6) +
geom_text(mapping = aes_string(x = icluster$centers[, "Value"],
y = icluster$centers[, "Area.Harvested"],
label = 1:4),
color = "black", size = 4) +
theme_light()
dis <- dist(maize_combined[(c(1,5,6,9))])^2
sil <- silhouette (icluster$cluster, dis)
library(cluster)
sil <- silhouette (icluster$cluster, dis)
windows()
plot(sil)
plot(sil)
windows()
plot(sil)
knn_maize_df <- maize_combined[c(5, 6, 9, 10)]
knn_maize_df <- na.omit(knn_maize_df)
View(knn_maize_df)
##Run normalization on first 4 columns of dataset because they are the predictors
knn_maize_df[1:3] <- as.data.frame(lapply(knn_maize_df[c(1,2,3)], nor))
View(knn_maize_df)
KNNpred <- knn(knntrain[1:3], knntest[1:3], cl = knntrain$Type, k = 23)
table(KNNpred,knntest$Type)
summary(KNNpred)
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=22.6 ~ 23
KNNpred <- knn(knntrain[1:3], knntest[1:3], cl = knntrain$Type, k = 23)
table(KNNpred,knntest$Type)
sample_maize_knn <- sample(1:nrow(knn_maize_df),0.7 * nrow(knn_maize_df))
knntrain = knn_maize_df[sample_maize_knn,]
knntest = knn_maize_df[-sample_maize_knn,]
nrow(knntrain)
sqrt(511) #=22.6 ~ 23
KNNpred <- knn(knntrain[1:3], knntest[1:3], cl = knntrain$Type, k = 23)
table(KNNpred,knntest$Type)
summary(KNNpred)
